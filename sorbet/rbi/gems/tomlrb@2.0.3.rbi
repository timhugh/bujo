# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tomlrb` gem.
# Please instead update this file by running `bin/tapioca gem tomlrb`.


# source://tomlrb//lib/tomlrb/version.rb#1
module Tomlrb
  class << self
    # Reads a file content and parses it into its Ruby data structure
    #
    # @option options
    # @param path [String] the path to the file
    # @param options [Hash] the options hash
    # @return [Hash] the Ruby data structure represented by the input
    #
    # source://tomlrb//lib/tomlrb.rb#40
    def load_file(path, **options); end

    # Parses a valid TOML string into its Ruby data structure
    #
    # @option options
    # @param string_or_io [String, StringIO] the content
    # @param options [Hash] the options hash
    # @return [Hash] the Ruby data structure represented by the input
    #
    # source://tomlrb//lib/tomlrb.rb#21
    def parse(string_or_io, **options); end
  end
end

# source://tomlrb//lib/tomlrb/generated_parser.rb#9
class Tomlrb::GeneratedParser < ::Racc::Parser
  # source://tomlrb//lib/tomlrb/generated_parser.rb#314
  def _reduce_10(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#321
  def _reduce_11(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#328
  def _reduce_12(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#335
  def _reduce_13(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#344
  def _reduce_15(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#351
  def _reduce_16(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#360
  def _reduce_18(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#367
  def _reduce_19(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#374
  def _reduce_20(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#384
  def _reduce_21(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#393
  def _reduce_23(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#414
  def _reduce_31(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#421
  def _reduce_32(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#436
  def _reduce_36(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#445
  def _reduce_37(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#453
  def _reduce_38(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#460
  def _reduce_39(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#470
  def _reduce_40(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#479
  def _reduce_41(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#491
  def _reduce_42(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#503
  def _reduce_43(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#510
  def _reduce_44(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#517
  def _reduce_45(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#527
  def _reduce_46(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#536
  def _reduce_48(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#555
  def _reduce_55(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#566
  def _reduce_58(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#577
  def _reduce_61(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#584
  def _reduce_62(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#601
  def _reduce_68(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#608
  def _reduce_69(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#621
  def _reduce_70(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#628
  def _reduce_71(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#641
  def _reduce_72(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#648
  def _reduce_73(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#670
  def _reduce_74(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#677
  def _reduce_75(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#684
  def _reduce_76(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#691
  def _reduce_77(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#698
  def _reduce_78(val, _values, result); end

  # source://tomlrb//lib/tomlrb/generated_parser.rb#705
  def _reduce_none(val, _values, result); end
end

# source://tomlrb//lib/tomlrb/generated_parser.rb#222
Tomlrb::GeneratedParser::Racc_arg = T.let(T.unsafe(nil), Array)

# source://tomlrb//lib/tomlrb/generated_parser.rb#290
Tomlrb::GeneratedParser::Racc_debug_parser = T.let(T.unsafe(nil), FalseClass)

# source://tomlrb//lib/tomlrb/generated_parser.rb#238
Tomlrb::GeneratedParser::Racc_token_to_s_table = T.let(T.unsafe(nil), Array)

# source://tomlrb//lib/tomlrb/handler.rb#2
class Tomlrb::Handler
  # @return [Handler] a new instance of Handler
  #
  # source://tomlrb//lib/tomlrb/handler.rb#5
  def initialize(**options); end

  # source://tomlrb//lib/tomlrb/handler.rb#58
  def assign(k); end

  # @yield [identifiers]
  #
  # source://tomlrb//lib/tomlrb/handler.rb#37
  def deal_with_array_of_tables(identifiers, is_array_of_tables); end

  # source://tomlrb//lib/tomlrb/handler.rb#101
  def end_(type); end

  # Returns the value of attribute output.
  #
  # source://tomlrb//lib/tomlrb/handler.rb#3
  def output; end

  # source://tomlrb//lib/tomlrb/handler.rb#67
  def push(o); end

  # source://tomlrb//lib/tomlrb/handler.rb#71
  def push_inline(inline_arrays); end

  # source://tomlrb//lib/tomlrb/handler.rb#15
  def set_context(identifiers, is_array_of_tables: T.unsafe(nil)); end

  # source://tomlrb//lib/tomlrb/handler.rb#97
  def start_(type); end

  # Returns the value of attribute symbolize_keys.
  #
  # source://tomlrb//lib/tomlrb/handler.rb#3
  def symbolize_keys; end

  # source://tomlrb//lib/tomlrb/handler.rb#110
  def validate_value(value); end

  private

  # source://tomlrb//lib/tomlrb/handler.rb#118
  def assign_key_path(current, key, key_emptied); end
end

# source://tomlrb//lib/tomlrb/handler.rb#203
class Tomlrb::Key
  # @return [Key] a new instance of Key
  #
  # source://tomlrb//lib/tomlrb/handler.rb#208
  def initialize(key, type, declared = T.unsafe(nil)); end

  # source://tomlrb//lib/tomlrb/handler.rb#219
  def <<(key_type_declared); end

  # source://tomlrb//lib/tomlrb/handler.rb#230
  def clear_children; end

  # @return [Boolean]
  #
  # source://tomlrb//lib/tomlrb/handler.rb#215
  def declared?; end

  # Returns the value of attribute key.
  #
  # source://tomlrb//lib/tomlrb/handler.rb#206
  def key; end

  # Returns the value of attribute type.
  #
  # source://tomlrb//lib/tomlrb/handler.rb#206
  def type; end

  private

  # source://tomlrb//lib/tomlrb/handler.rb#236
  def validate_already_declared_as_different_key(type, declared, existed); end

  # source://tomlrb//lib/tomlrb/handler.rb#242
  def validate_already_declared_as_non_array_table(type, is_array_of_tables, declared, existed); end

  # source://tomlrb//lib/tomlrb/handler.rb#260
  def validate_already_declared_as_same_key(declared, existed); end

  # source://tomlrb//lib/tomlrb/handler.rb#248
  def validate_path_already_created_as_different_type(type, declared, existed); end

  # source://tomlrb//lib/tomlrb/handler.rb#254
  def validate_path_already_declared_as_different_type(type, declared, existed); end
end

# source://tomlrb//lib/tomlrb/handler.rb#204
class Tomlrb::Key::KeyConflict < ::Racc::ParseError; end

# source://tomlrb//lib/tomlrb/handler.rb#131
class Tomlrb::Keys
  # @return [Keys] a new instance of Keys
  #
  # source://tomlrb//lib/tomlrb/handler.rb#132
  def initialize; end

  # source://tomlrb//lib/tomlrb/handler.rb#144
  def <<(keys); end

  # source://tomlrb//lib/tomlrb/handler.rb#140
  def add_pair_key(keys, context); end

  # source://tomlrb//lib/tomlrb/handler.rb#136
  def add_table_key(keys, is_array_of_tables = T.unsafe(nil)); end

  private

  # source://tomlrb//lib/tomlrb/handler.rb#180
  def append_pair_keys(current, pair_keys, table_keys_empty, is_array_of_tables); end

  # source://tomlrb//lib/tomlrb/handler.rb#153
  def append_table_keys(current, table_keys, pair_keys_empty, is_array_of_tables); end

  # source://tomlrb//lib/tomlrb/handler.rb#192
  def find_or_create_first_pair_key(current, key, declared, table_keys_empty); end

  # source://tomlrb//lib/tomlrb/handler.rb#167
  def find_or_create_first_table_key(current, key, declared, is_array_of_tables); end
end

# source://tomlrb//lib/tomlrb/local_date.rb#4
class Tomlrb::LocalDate
  extend ::Forwardable

  # @return [LocalDate] a new instance of LocalDate
  #
  # source://tomlrb//lib/tomlrb/local_date.rb#9
  def initialize(year, month, day); end

  # source://tomlrb//lib/tomlrb/local_date.rb#24
  def ==(other); end

  # source://tomlrb//lib/tomlrb/local_date.rb#7
  def day(*args, **_arg1, &block); end

  # source://tomlrb//lib/tomlrb/local_date.rb#29
  def inspect; end

  # source://tomlrb//lib/tomlrb/local_date.rb#7
  def month(*args, **_arg1, &block); end

  # source://tomlrb//lib/tomlrb/local_date.rb#20
  def to_s; end

  # @param offset see {LocalDateTime#to_time}
  # @return [Time] 00:00:00 of the date
  #
  # source://tomlrb//lib/tomlrb/local_date.rb#15
  def to_time(offset = T.unsafe(nil)); end

  # source://tomlrb//lib/tomlrb/local_date.rb#7
  def year(*args, **_arg1, &block); end
end

# source://tomlrb//lib/tomlrb/local_date_time.rb#4
class Tomlrb::LocalDateTime
  extend ::Forwardable

  # @return [LocalDateTime] a new instance of LocalDateTime
  #
  # source://tomlrb//lib/tomlrb/local_date_time.rb#9
  def initialize(year, month, day, hour, min, sec); end

  # source://tomlrb//lib/tomlrb/local_date_time.rb#31
  def ==(other); end

  # source://tomlrb//lib/tomlrb/local_date_time.rb#7
  def day(*args, **_arg1, &block); end

  # source://tomlrb//lib/tomlrb/local_date_time.rb#7
  def hour(*args, **_arg1, &block); end

  # source://tomlrb//lib/tomlrb/local_date_time.rb#36
  def inspect; end

  # source://tomlrb//lib/tomlrb/local_date_time.rb#7
  def min(*args, **_arg1, &block); end

  # source://tomlrb//lib/tomlrb/local_date_time.rb#7
  def month(*args, **_arg1, &block); end

  # source://tomlrb//lib/tomlrb/local_date_time.rb#7
  def nsec(*args, **_arg1, &block); end

  # source://tomlrb//lib/tomlrb/local_date_time.rb#7
  def sec(*args, **_arg1, &block); end

  # source://tomlrb//lib/tomlrb/local_date_time.rb#25
  def to_s; end

  # @param offset [String, Symbol, Numeric, nil] time zone offset.
  #   * when +String+, must be '+HH:MM' format, '-HH:MM' format, 'UTC', 'A'..'I' or 'K'..'Z'. Arguments excluding '+-HH:MM' are supporeted at Ruby >= 2.7.0
  #   * when +Symbol+, must be +:dst+(for summar time for local) or +:std+(for standard time).
  #   * when +Numeric+, it is time zone offset in second.
  #   * when +nil+, local time zone offset is used.
  # @return [Time]
  #
  # source://tomlrb//lib/tomlrb/local_date_time.rb#20
  def to_time(offset = T.unsafe(nil)); end

  # source://tomlrb//lib/tomlrb/local_date_time.rb#7
  def usec(*args, **_arg1, &block); end

  # source://tomlrb//lib/tomlrb/local_date_time.rb#7
  def year(*args, **_arg1, &block); end
end

# source://tomlrb//lib/tomlrb/local_time.rb#4
class Tomlrb::LocalTime
  extend ::Forwardable

  # @return [LocalTime] a new instance of LocalTime
  #
  # source://tomlrb//lib/tomlrb/local_time.rb#9
  def initialize(hour, min, sec); end

  # source://tomlrb//lib/tomlrb/local_time.rb#29
  def ==(other); end

  # source://tomlrb//lib/tomlrb/local_time.rb#7
  def hour(*args, **_arg1, &block); end

  # source://tomlrb//lib/tomlrb/local_time.rb#34
  def inspect; end

  # source://tomlrb//lib/tomlrb/local_time.rb#7
  def min(*args, **_arg1, &block); end

  # source://tomlrb//lib/tomlrb/local_time.rb#7
  def nsec(*args, **_arg1, &block); end

  # source://tomlrb//lib/tomlrb/local_time.rb#7
  def sec(*args, **_arg1, &block); end

  # source://tomlrb//lib/tomlrb/local_time.rb#23
  def to_s; end

  # @param year [Integer]
  # @param month [Integer]
  # @param day [Integer]
  # @param offset see {LocalDateTime#to_time}
  # @return [Time] the time of the date specified by params
  #
  # source://tomlrb//lib/tomlrb/local_time.rb#19
  def to_time(year, month, day, offset = T.unsafe(nil)); end

  # source://tomlrb//lib/tomlrb/local_time.rb#7
  def usec(*args, **_arg1, &block); end
end

# source://tomlrb//lib/tomlrb.rb#13
class Tomlrb::ParseError < ::StandardError; end

# source://tomlrb//lib/tomlrb/parser.rb#3
class Tomlrb::Parser < ::Tomlrb::GeneratedParser
  # @return [Parser] a new instance of Parser
  #
  # source://tomlrb//lib/tomlrb/parser.rb#5
  def initialize(tokenizer, **options); end

  # source://tomlrb//lib/tomlrb/parser.rb#11
  def next_token; end

  # source://tomlrb//lib/tomlrb/parser.rb#15
  def parse; end
end

# source://tomlrb//lib/tomlrb/scanner.rb#4
class Tomlrb::Scanner
  # @return [Scanner] a new instance of Scanner
  #
  # source://tomlrb//lib/tomlrb/scanner.rb#24
  def initialize(io); end

  # source://tomlrb//lib/tomlrb/scanner.rb#29
  def next_token; end

  # source://tomlrb//lib/tomlrb/scanner.rb#54
  def process_datetime; end

  # source://tomlrb//lib/tomlrb/scanner.rb#67
  def process_eos; end

  # source://tomlrb//lib/tomlrb/scanner.rb#62
  def process_local_time; end
end

# source://tomlrb//lib/tomlrb/scanner.rb#19
Tomlrb::Scanner::BOOLEAN = T.let(T.unsafe(nil), Regexp)

# source://tomlrb//lib/tomlrb/scanner.rb#5
Tomlrb::Scanner::COMMENT = T.let(T.unsafe(nil), Regexp)

# source://tomlrb//lib/tomlrb/scanner.rb#13
Tomlrb::Scanner::DATETIME = T.let(T.unsafe(nil), Regexp)

# source://tomlrb//lib/tomlrb/scanner.rb#15
Tomlrb::Scanner::FLOAT = T.let(T.unsafe(nil), Regexp)

# source://tomlrb//lib/tomlrb/scanner.rb#16
Tomlrb::Scanner::FLOAT_KEYWORD = T.let(T.unsafe(nil), Regexp)

# source://tomlrb//lib/tomlrb/scanner.rb#6
Tomlrb::Scanner::IDENTIFIER = T.let(T.unsafe(nil), Regexp)

# source://tomlrb//lib/tomlrb/scanner.rb#17
Tomlrb::Scanner::INTEGER = T.let(T.unsafe(nil), Regexp)

# source://tomlrb//lib/tomlrb/scanner.rb#14
Tomlrb::Scanner::LOCAL_TIME = T.let(T.unsafe(nil), Regexp)

# source://tomlrb//lib/tomlrb/scanner.rb#8
Tomlrb::Scanner::NEWLINE = T.let(T.unsafe(nil), Regexp)

# source://tomlrb//lib/tomlrb/scanner.rb#18
Tomlrb::Scanner::NON_DEC_INTEGER = T.let(T.unsafe(nil), Regexp)

# source://tomlrb//lib/tomlrb/scanner.rb#7
Tomlrb::Scanner::SPACE = T.let(T.unsafe(nil), Regexp)

# source://tomlrb//lib/tomlrb/scanner.rb#22
Tomlrb::Scanner::SPACED_ARRAY_OF_TABLES_BOTH = T.let(T.unsafe(nil), Regexp)

# source://tomlrb//lib/tomlrb/scanner.rb#21
Tomlrb::Scanner::SPACED_ARRAY_OF_TABLES_END = T.let(T.unsafe(nil), Regexp)

# source://tomlrb//lib/tomlrb/scanner.rb#20
Tomlrb::Scanner::SPACED_ARRAY_OF_TABLES_START = T.let(T.unsafe(nil), Regexp)

# source://tomlrb//lib/tomlrb/scanner.rb#9
Tomlrb::Scanner::STRING_BASIC = T.let(T.unsafe(nil), Regexp)

# source://tomlrb//lib/tomlrb/scanner.rb#11
Tomlrb::Scanner::STRING_LITERAL = T.let(T.unsafe(nil), Regexp)

# source://tomlrb//lib/tomlrb/scanner.rb#12
Tomlrb::Scanner::STRING_LITERAL_MULTI = T.let(T.unsafe(nil), Regexp)

# source://tomlrb//lib/tomlrb/scanner.rb#10
Tomlrb::Scanner::STRING_MULTI = T.let(T.unsafe(nil), Regexp)

# source://tomlrb//lib/tomlrb/string_utils.rb#2
class Tomlrb::StringUtils
  class << self
    # source://tomlrb//lib/tomlrb/string_utils.rb#14
    def multiline_replacements(str); end

    # source://tomlrb//lib/tomlrb/string_utils.rb#24
    def replace_escaped_chars(str); end

    # source://tomlrb//lib/tomlrb/string_utils.rb#34
    def strip_spaces(str); end
  end
end

# source://tomlrb//lib/tomlrb/string_utils.rb#4
Tomlrb::StringUtils::SPECIAL_CHARS = T.let(T.unsafe(nil), Hash)

# source://tomlrb//lib/tomlrb/version.rb#2
Tomlrb::VERSION = T.let(T.unsafe(nil), String)
